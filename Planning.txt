# Planning

## Purpose

Store files in the cloud and access them from anywhere. This is to replace the use of AWS S3 in my projects.

## Features and Functionality

These are the overall features to add to the application. They are to be split into priority levels.

-	Data storage
	-	Create 'buckets' to store files
	-   Upload files to buckets
	-   Download files from buckets
	-   Delete files from buckets
	-   Delete buckets
-	Management
	-	Sign up
	-	Sign in
	-	Sign out
	-	Change password
	-	Reset password
	-	Delete account
	-	Change username
	-	List buckets
	-	List files in a bucket
	-	Create API Key
	-	Delete API Key
-	Restrictions
	-	File size limits
	-   Data caps for users
-	Nice to haves:
	-	Encrypt files when stored on disk
    -   Save/serve smaller images (eg thumbnail size)
	-   Validate a file name is unique before submitting
	-	Protect open endpoints


## Plan

-	MVP (API only, no UI) - Done
	-	Register account (with manual verification) - done (minus verification, this will be added in the future)
	-	Get auth token (using API token) - done
	-	Create bucket - done
	-	Upload file - done
	-	Download file - done
-	V1.1
	-   Create UI
		-	Sign up - done
		-	Refactor to use class for environment variable names - done
		-	Sign in - done
		-	Sign out - done
		-	List buckets - done
		-	Delete bucket - done
		-	List files in bucket - done
			-	Display url
		-	Generate API Key - done
-	V1.2
	-	Delete file from bucket
	-	Delete API key
	-	Change password
	-	Forgot password
	-	Email 2fa on sign up
	-	Add security features
		-	Limit file size
		-	Add Data Cap
		-	Encrypt files on disk
-	V1.3
	-	Email notifications to me
		-	Someone registers
		-	Someone reaches their data cap
	-	UI for managing StoreBytes users
	-	Buckets
		-	Option to be private or public
			-	Private buckets require a token in the request header
		-	Add search option in bucket list page
		


### Design

#### Bucket List page

-	Button to add new
	-	Add bucket popup modal
		-	Name field
		-	Submit to create the bucket
-	List of buckets for user
	-	Name
	-	Active
	-	Number of files
	-	Total Size of bucket
	-   Clicking the list item goes to the bucket details page for that bucket

-	API Endpoints required:
	-	Get List of buckets by user ID

#### Bucket Details page

-	Details
	-	name
	-	Identifier (hashed name)
	-	Create date
	-	Edit button
		-	Allows the user to change the bucket name
	-	Disable button (visible only if is_active = true)
		-	Shows confirmation prompt/window
		-	Sets is_active to false
	-	Enable button (visible only if is_active = false)
		-	Shows confirmation prompt/window
		-	Sets is_active to true
	-	Delete button
		-	Shows confirmation prompt/window
		-	Removes the bucket and all files belonging to the bucket from the database
-	List of files
	-	name
	-	Identifier (file_path)
	-	Full URL (link)
	-	Size
	-	Create date
	
-	API Endpoints required:
	-	Get Bucket details by bucket hash
	-	Get List of files by bucket id or hash

#### Profile page

-	User details
	-	Email address
	-	Sign up date
-	Add API key button
	-	Popup modal
		-	Description field (optional)
	-	Popup modal after successfully creating the api key
		-	Displays the new API key value (this will only appear once and the user will need to save it at this point)
-	API Key list
	-	Description
	-	Create date
	-	Expiry date
	-	Active status
	
-	API Endpoints required:
	-	Get list of API keys by user Id
	-	Move existing create-api-key endpoint to a new keys controller
	
#### API Page

-	This is a page that will give the user information on how to use the API for creating buckets, uploading and retrieving files.