@page
@model StoreBytes.Web.Pages.Buckets.ListModel
@{
    ViewData["Title"] = "Buckets";
}

<!-- Display server-side error message -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Display success message -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container d-flex flex-column align-items-center mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3" style="min-width: 300px;">
        <h2 class="mb-0">Buckets</h2>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBucketModal">Add Bucket</button>
    </div>

    <!-- List of buckets -->
    <div class="d-flex flex-column justify-content-center gap-3">
        @foreach (var bucket in Model.Buckets)
        {
            <div class="card shadow-sm" style="min-width: 300px;">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>
                        <strong class="d-block">@bucket.Name</strong>
                        <small class="text-muted">
                            Files: @bucket.FileCount,
                            @((bucket.TotalSize < 10_000_000)
                                ? (bucket.TotalSize / 1_000_000.0).ToString("F1") + " MB"
                                : (bucket.TotalSize / 1_000_000).ToString("N0") + " MB")
                        </small>
                    </div>
                    <span class="badge @((bucket.IsActive ? "bg-success" : "bg-secondary"))">
                        @(bucket.IsActive ? "Active" : "Inactive")
                    </span>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal for adding a new bucket -->
<div class="modal fade" id="addBucketModal" tabindex="-1" aria-labelledby="addBucketLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addBucketLabel">Add New Bucket</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" id="addBucketForm" asp-page-handler="AddBucket">
                    <div class="form-group">
                        <label for="bucketName">Bucket Name</label><br />
                        <small class="form-text text-muted">Bucket names must start with a letter and can only contain letters, numbers, and underscores (_).</small>
                        <input type="text" class="form-control" id="bucketName" name="BucketName" value="@Model.BucketName" />
                        <span asp-validation-for="BucketName" id="bucketNameError" class="text-danger" data-valmsg-for="BucketName"></span>
                    </div>
                    <div class="form-group mt-3">
                        <button type="submit" id="createBucketButton" class="btn btn-primary">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Attach event listener to the form
    document.getElementById('addBucketForm').addEventListener('submit', (event) => {
        const bucketName = document.getElementById('bucketName').value;
        const bucketNameError = document.getElementById('bucketNameError');

        // Clear previous error messages
        if (bucketNameError) {
            bucketNameError.textContent = '';
        }

        // Client-side validation
        const isValid = /^[a-zA-Z][a-zA-Z0-9_]*$/.test(bucketName);
        if (!isValid) {
            if (bucketNameError) {
                bucketNameError.textContent = 'Invalid bucket name';
            }
            console.log('Invalid bucket name.');
            event.preventDefault(); // Prevent the form submission
        }
    });

    // Clear the bucket name field and error message when the modal is closed
    document.getElementById('addBucketModal').addEventListener('hidden.bs.modal', () => {
        const bucketNameField = document.getElementById('bucketName');
        const bucketNameError = document.getElementById('bucketNameError');

        if (bucketNameField) {
            bucketNameField.value = '';
        }
        if (bucketNameError) {
            bucketNameError.textContent = '';
        }
    });
</script>
